{
  "hash": "2446437f1f23f8dacc267d95b017028a",
  "result": {
    "markdown": "---\ntitle: 'Methods'\ndate: '2023-07-13'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n#bibliography: references.bib\n---\n\n\nRuby Krasnow\nLast modified: July 13, 2023\n\nLoad packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate) #date formatting\nlibrary(patchwork) #combining plots\nlibrary(rEDM) #EDM\n\n#spatial packages\nlibrary(sf)\nlibrary(sfheaders)\nlibrary(spdep)\n```\n:::\n\n\n\n\nAnalysis was performed on the catch weight (kg) of each species, which was recorded for each tow and standardized by DMR to account for tows that were longer or shorter than the 1 NM standard. \n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tows<-read.csv(\"~/Downloads/lab_notebook/data/Maine_inshore_trawl/MEtows.csv\") #tow data\ndf_s_cat<- read.csv(\"~/Downloads/lab_notebook/data/Maine_inshore_trawl/MEscallopCatch.csv\") #scallop catch\ndf_r_cat<- read.csv(\"~/Downloads/lab_notebook/data/Maine_inshore_trawl/MErockCatch.csv\") #rock crab catch\ndf_j_cat<- read.csv(\"~/Downloads/lab_notebook/data/Maine_inshore_trawl/MEjonahCatch.csv\") #jonah crab catch\n\nsurveyGrid <-st_read(\"~/Downloads/lab_notebook/Maine/MaineDMR_-_Inshore_Trawl_Survey_Grid/\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MaineDMR_-_Inshore_Trawl_Survey_Grid' from data source \n  `/Users/rubykrasnow/Downloads/lab_notebook/Maine/MaineDMR_-_Inshore_Trawl_Survey_Grid' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3698 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -70.81288 ymin: 42.86466 xmax: -66.88822 ymax: 44.81316\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n#CRS: WGS 84/EPSG 4326\n\nsurveyGrid <- surveyGrid %>% \n  mutate(Region = region_id,\n         Stratum = depth_stra,\n         GridID = grid_id, .keep=\"unused\", .before=last_surve)\n\nsurveyGrid$region_stratum <- paste(surveyGrid$Region, surveyGrid$Stratum)\n```\n:::\n\n\nWeight data was log transformed to reduce nonstationarity, which was assessed for each study area using the Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test (Kwiatkowski et al., 1992).\n\n::: {.cell}\n\n```{.r .cell-code}\n# cleanCatch function includes log transformation; see helpFunctionsMaine script for details\n\ns_cat_clean <- cleanCatch(df_s_cat) %>% \n  mutate(Common_Name = \"Scallop\")\n\nr_cat_clean <- cleanCatch(df_r_cat) %>% \n  mutate(Common_Name = \"Rock\")\n\nj_cat_clean <- cleanCatch(df_j_cat) %>% \n  mutate(Common_Name = \"Jonah\")\n\n#Reorder columns\ncolOrder<-c(\"area\", \"Survey\", \"Tow_Number\", \"Region\", \"Stratum\", \"logCatch\", \"logWt\", \"Expanded_Catch\", \n  \"Expanded_Weight_kg\", \"Date\", \"Common_Name\", \"Number_Caught\", \"Weight_kg\",\n  \"Start_Latitude\", \"Start_Longitude\",\"Season\",\n  \"Year\",\"Grid\", \"Start_Depth_fathoms\", \"End_Depth_fathoms\",\n  \"Bottom_WaterTemp_DegC\", \"Bottom_Salinity\")\n\nj_cat_clean <- j_cat_clean %>% select(all_of(colOrder))\nr_cat_clean <- r_cat_clean %>% select(all_of(colOrder))\ns_cat_clean <- s_cat_clean %>% select(all_of(colOrder))\n\ns_cat_sf<- st_as_sf(s_cat_clean, coords = c(\"Start_Longitude\", \"Start_Latitude\"), crs=4326)\nr_cat_sf<- st_as_sf(r_cat_clean, coords = c(\"Start_Longitude\", \"Start_Latitude\"), crs=4326)\nj_cat_sf<- st_as_sf(j_cat_clean, coords = c(\"Start_Longitude\", \"Start_Latitude\"), crs=4326)\n\n#computes averages for each study area (area = region-stratum combination)\nj_cat_sum <- summaryCatch(j_cat_clean)\nr_cat_sum <- summaryCatch(r_cat_clean)\ns_cat_sum <- summaryCatch(s_cat_clean)\n\ncatch <- s_cat_sum %>% left_join(j_cat_sum, by=c(\"area\", \"Season\", \"Region\", \"Stratum\", \"Year\"), suffix = c(\"_s\", \"_j\"))\ncatch <- catch %>% left_join(r_cat_sum, by=c(\"area\", \"Season\", \"Region\", \"Stratum\", \"Year\")) %>% \n  mutate(avgCatch_r = avgCatch,avgWt_r = avgWt,avgLogCatch_r = avgLogCatch,avgLogWt_r = avgLogWt, .keep=\"unused\")\n\ncatchTidy <- pivot_longer(catch, \n        cols = 6:ncol(catch)) %>% \n  mutate(Type = case_when(\n    startsWith(name, \"avgCatch_\") ~\"catch\",\n    startsWith(name,\"avgWt_\") ~\"wt\",\n    startsWith(name,\"avgLogWt\") ~\"logWt\",\n    startsWith(name,\"avgLogCatch\") ~\"logCatch\")) %>% \n  mutate(Species = case_when(\n    endsWith(name, \"s\") ~\"scallop\",\n    endsWith(name, \"r\") ~\"rock\",\n    endsWith(name, \"j\") ~\"jonah\"))\n\ncatchTidy <- catchTidy %>% mutate(area = as.factor(area), Species = as.factor(Species),Season = as.factor(Season),Region = as.factor(Region), Stratum = as.factor(Stratum)) %>% \n          select(-name)\n\nlogWtFall <- catchTidy %>% filter(Type == \"logWt\") %>% filter(Season == \"Fall\")\n\nfindSpeciesKPSS(logWtFall %>% filter(Species==\"scallop\"), season=\"Fall\", type=\"logWt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n     `1`    `2`    `3`    `4`\n   <dbl>  <dbl>  <dbl>  <dbl>\n1 0.0794 0.0948 0.1    0.1   \n2 0.1    0.0674 0.0528 0.1   \n3 0.1    0.0385 0.0428 0.1   \n4 0.1    0.0410 0.0149 0.0495\n5 0.0689 0.1    0.1    0.1   \n```\n:::\n\n```{.r .cell-code}\nfindSpeciesKPSS(logWtFall %>% filter(Species==\"rock\"), season=\"Fall\", type=\"logWt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n     `1`    `2`    `3`      `4`\n   <dbl>  <dbl>  <dbl>    <dbl>\n1 0.1    0.1    0.1    NaN     \n2 0.0372 0.0881 0.1      0.1   \n3 0.1    0.0183 0.1      0.1   \n4 0.1    0.1    0.0932   0.0832\n5 0.1    0.1    0.1      0.1   \n```\n:::\n\n```{.r .cell-code}\nfindSpeciesKPSS(logWtFall %>% filter(Species==\"jonah\"), season=\"Fall\", type=\"logWt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n     `1`    `2`   `3`   `4`\n   <dbl>  <dbl> <dbl> <dbl>\n1 0.0303 0.1      0.1   0.1\n2 0.0439 0.0979   0.1   0.1\n3 0.1    0.1      0.1   0.1\n4 0.1    0.1      0.1   0.1\n5 0.1    0.1      0.1   0.1\n```\n:::\n:::\n",
    "supporting": [
      "Methods_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}